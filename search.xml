<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux mysql定时自动备份的实现</title>
    <url>/2021/03/03/linux-mysql%E5%AE%9A%E6%97%B6%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>基本上不管是对于我们自己使用，还是给客户部署服务器，mysql备份是不可或缺的一部分，这里就教大家怎么去实现mysql的定时自动备份功能，为了实现这个功能，也是踩了各种坑，最后整理出来的，在这里我们实现了下面这三个功能</p>
<span id="more"></span>
<ul>
<li>mysql_backup.sh 用于备份数据</li>
<li>mysql_restore.sh 用于恢复数据</li>
<li>remove_backup.sh 用于删除一段时间以前的备份文件</li>
</ul>
<p><code>  我是使用root用户操作的，如果用户组权限不够的话，需要 sudo 提权，这个就看大家自己的需要了  还需要大家具有 vi 的操作技能哦，如不会的话需要大家自行了解了，这里就不赘述了</code></p>
<h2 id="一、数据备份"><a href="#一、数据备份" class="headerlink" title="一、数据备份"></a>一、数据备份</h2><ol>
<li>创建备份目录<br>这里我选择了把备份文件放在 /data/backup/mysql下面，把脚本放在 /data/backup 下面<br>先创建文件夹<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;data&#x2F;backup&#x2F;mysql </span><br><span class="line">cd &#x2F;data&#x2F;backup</span><br></pre></td></tr></table></figure></li>
<li>创建脚本文件<br>创建mysql_backup.sh<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi mysql_backup.sh</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>粘贴下面的脚本内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">需要的话，自己改这里哦</span><br><span class="line">#db_user&#x3D;’root’</span><br><span class="line">#db_password&#x3D;cat &#x2F;data&#x2F;www&#x2F;mysql_password</span><br><span class="line">db_name&#x3D;’baizhan’</span><br><span class="line">backup_dir&#x3D;’&#x2F;data&#x2F;backup&#x2F;mysql&#x2F;‘</span><br><span class="line">current_time&#x3D;$(date +’%Y-%m-%d_%H%M%S’)</span><br><span class="line">filepath&#x3D;$backup_dir$current_time’.sql.gz’</span><br><span class="line">#此处没有使用 $db_password $db_user, 已经写入到配置文件中</span><br><span class="line">echo ‘开始导出数据库…’</span><br><span class="line">mysqldump –defaults-extra-file&#x3D;&#x2F;data&#x2F;backup&#x2F;my_mysql.cnf $db_name | gzip &gt; $filepath</span><br><span class="line">echo ‘导出成功，文件名为: ‘$filepath</span><br></pre></td></tr></table></figure>

<p><code>上面的脚本没有使用到 $db_passoword, 需要的话，大家也可以不用创建配置文件，直接把 -p$db_password -u$db_user拼接到 mysqldupm 命令后面 亲测使用 gzip 命令压缩的话，可以节省 80% 的空间 mysql 5.6以上会提示在命令行输入密码不安全，会有一行 notice ，但是也能导出成功 如果直接使用密码的话，就会报下面这个警告 mysqldump: [Warning] Using a password on the command line interface can be insecure. 解决不报错的办法就是把密码写到配置文件中去，文件内容参考如下，配置文件我们可以在新建一个</code></p>
<p>新建配置文件, 就在我们的当前目录下 即 /data/backup</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi my_mysql.cnf</span><br></pre></td></tr></table></figure>

<p>下面的是文件内容，这里可以设置一下允许导出的文件大小上限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqldump] </span><br><span class="line">max_allowed_packet &#x3D; 400M </span><br><span class="line">host&#x3D;127.0.0.1 </span><br><span class="line">user&#x3D;root </span><br><span class="line">password&#x3D;&#39;SgDGfsrfEi3#@%#%ugslp%z!dAP&#39; </span><br><span class="line">[mysql] </span><br><span class="line">host&#x3D;127.0.0.1 </span><br><span class="line">user&#x3D;root </span><br><span class="line">password&#x3D;&#39;SgDGfsrfEi3#@%#%ugslp%z!dAP&#39;</span><br></pre></td></tr></table></figure>

<p><code>各位看官请把上面的参数改成自己的就好了，可别漏了这一步哦 其中 mysqldump 下的参数是给导出的命令使用的，mysql 下的参数是导入的时候使用的</code></p>
<p>到这里的话导出的shell脚本就已经写好了，我们对这个脚本加一下可执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x .&#x2F;mysql_backup.sh</span><br></pre></td></tr></table></figure>
<p>现在我们就可以使用下面的命令来导出了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh .&#x2F;mysql_backup.sh</span><br><span class="line">查看一下结果</span><br><span class="line">ll .&#x2F;mysql</span><br></pre></td></tr></table></figure>

<p>到这里为止，我们的导出脚本已经完成了，接下来就是导入脚本了</p>
<h2 id="二、数据恢复"><a href="#二、数据恢复" class="headerlink" title="二、数据恢复"></a>二、数据恢复</h2><ol>
<li>创建脚本文件<br>按照第一步的操作，此时我们应该处于 /data/backup 目录下，继续操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi mysql_restore.sh</span><br></pre></td></tr></table></figure>
粘贴下面的内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">if [ -z $1 ] || [ ! -f $1 ]</span><br><span class="line">then</span><br><span class="line">echo “请输入sql压缩文件(*.sql.gz)”</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">db_name&#x3D;’baizhan’</span><br><span class="line">base_dir&#x3D;’&#x2F;data&#x2F;backup&#x2F;mysql&#x2F;‘</span><br><span class="line">gz_sql_file&#x3D;basename $1</span><br><span class="line"></span><br><span class="line">file_ext&#x3D;$&#123;gz_sql_file##*.&#125;</span><br><span class="line">if [ $file_ext !&#x3D; ‘gz’ ]</span><br><span class="line">then</span><br><span class="line">echo ‘文件格式不正确，请输入 .sql.gz 文件’</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">sql_file&#x3D;$&#123;gz_sql_file%.*&#125;</span><br><span class="line">echo ‘解压文件中…’</span><br><span class="line">gzip -dc $base_dir$gz_sql_file &gt; $base_dir$sql_file</span><br><span class="line">echo ‘解压完成.’</span><br><span class="line">echo ‘开始导入数据库…’</span><br><span class="line"></span><br><span class="line">mysql –defaults-extra-file&#x3D;&#x2F;data&#x2F;backup&#x2F;my_mysql.cnf $db_name &lt; $base_dir$sql_file</span><br><span class="line"></span><br><span class="line">if [ -f $base_dir$sql_file ]</span><br><span class="line">then</span><br><span class="line">echo ‘删除临时文件.’</span><br><span class="line">rm -f $base_dir$sql_file</span><br><span class="line">fi</span><br><span class="line">echo ‘导入完成.’</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>上面代码中的配置文件，就是我们第一步时创建的配置文件，在这里一样的使用</p>
<p>增加文件可执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x .&#x2F;mysql_restore.sh</span><br></pre></td></tr></table></figure>

<p>以上就是导入脚本内容，我们来执行一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh .&#x2F;mysql_restore.sh .&#x2F;mysql&#x2F;2018-11-30_223601.sql.gz</span><br></pre></td></tr></table></figure>

<p>在这里我们的第一个参数可以直接写备份文件的名字，不用写目录，但是因为加上目录之后，可以使用table进行自动补全，所以十分方便，<br><code>其实可以在任何文件夹进行恢复，执行 sh /data/backup/mysql_restore.sh /data/backup/mysql/2018-11-30_223601.sql.gz 也可以这样 sh /data/backup/mysql_restore.sh 2018-11-30_223601.sql.gz</code><br>到这里我们的脚本就已经写完了，就剩下创建定时任务来执行了</p>
<h2 id="三、创建计划任务"><a href="#三、创建计划任务" class="headerlink" title="三、创建计划任务"></a>三、创建计划任务</h2><ol>
<li>添加计划任务<br><code>这里并没有教大家怎么使用 crontab, 如果有小伙伴不会的话，搜一下就有答案了</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">粘贴下面的内容， 大家根据自己的需要更改就可以了</span><br><span class="line">0 1,12 * * * &#x2F;data&#x2F;backup&#x2F;mysql_backup.sh # 每天凌晨1点，中午12点备份一次数据</span><br><span class="line">大家可以先使用下面这条做为测试哦，1分钟跑一次，我们只需要查看 ll &#x2F;data&#x2F;backup&#x2F;mysql 这个文件夹就好了</span><br><span class="line">*&#x2F;1 * * * * &#x2F;data&#x2F;backup&#x2F;mysql_backup.sh</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="四、更新，添加自动清理备份"><a href="#四、更新，添加自动清理备份" class="headerlink" title="四、更新，添加自动清理备份"></a>四、更新，添加自动清理备份</h2><ol>
<li>创建删除文件脚本<br>我们还是在/data/backup 目录下面创建脚本，下面就是脚本内容了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi remove_backup.sh</span><br><span class="line">复制下面的脚本内容</span><br><span class="line">#&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">删除30天前的备份</span><br><span class="line">find &#x2F;data&#x2F;backup&#x2F;mysql -type f -mtime +30 | xargs rm -f</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>我这里是选择备份数据只保留最近30天的，大家根据需要自行修改<br>同样的道理，添加可执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x .&#x2F;remove_backup.sh</span><br><span class="line"></span><br><span class="line">使用下面这个命令可以手动清理哦</span><br><span class="line">.&#x2F;remove_backup.sh</span><br></pre></td></tr></table></figure>

<p>接下来我们就要做到自动清理了，添加到 crontab中，和上一步的自动备份一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">下面这个就是脚本内容哦，添加这一句</span><br><span class="line">0 1 * * * &#x2F;data&#x2F;backup&#x2F;remove_backup.sh # 每天凌晨1点，自动删除30天前的备份</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>大功告成，以上就是所有的 mysql 自动定时备份和手动恢复脚本了，有疑问的话，欢迎各位评论</p>
]]></content>
  </entry>
  <entry>
    <title>测试一下</title>
    <url>/2021/02/26/you-title/</url>
    <content><![CDATA[<p>艳辉神经病</p>
]]></content>
  </entry>
  <entry>
    <title>单例模式的五种写法</title>
    <url>/2021/03/01/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一-懒汉式"><a href="#一-懒汉式" class="headerlink" title="一. 懒汉式"></a>一. 懒汉式</h2><span id="more"></span>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LHan &#123;  </span><br><span class="line"></span><br><span class="line">    private static LHan instance;  </span><br><span class="line"></span><br><span class="line">    private LHan();  </span><br><span class="line"></span><br><span class="line">    public static LHan getInstance()&#123;  </span><br><span class="line">        if( instance  &#x3D;&#x3D; null )&#123;  </span><br><span class="line">            instance &#x3D; new LHan();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>懒汉式，顾名思义就是实例在用到的时候才去创建，“比较懒”，用的时候才去检查有没有实例，如果有则返回，没有则新建。有线程安全和线程不安全两种写法，区别就是synchronized关键字。</p>
<h2 id="二-饿汉式"><a href="#二-饿汉式" class="headerlink" title="二. 饿汉式"></a>二. 饿汉式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class EHan&#123;  </span><br><span class="line"></span><br><span class="line">    private static EHan instance &#x3D; new EHan();</span><br><span class="line">    </span><br><span class="line">    private EHan();</span><br><span class="line">    </span><br><span class="line">    public static EHan getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>饿汉式，从名字上也很好理解，就是“比较勤”，实例在初始化的时候就已经建好了，不管你有没有用到，都先建好了再说。好处是没有线程安全的问题，坏处是浪费内存空间。</p>
<h2 id="三-双检锁"><a href="#三-双检锁" class="headerlink" title="三. 双检锁"></a>三. 双检锁</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DoubleCheck&#123;</span><br><span class="line"></span><br><span class="line">    private static DoubleCheck instance;</span><br><span class="line">    </span><br><span class="line">    private DoubleCheck()&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    public static DoubleCheck getInstance()&#123;</span><br><span class="line">        if (instance &#x3D;&#x3D; null )&#123;</span><br><span class="line">            synchronized (DoubleCheck.class)&#123;</span><br><span class="line">                if( instance &#x3D;&#x3D; null )&#123; </span><br><span class="line">                    instance &#x3D; new DoubleCheck();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双检锁，又叫双重校验锁，综合了懒汉式和饿汉式两者的优缺点整合而成。看上面代码实现中，特点是在synchronized关键字内外都加了一层 if 条件判断，这样既保证了线程安全，又比直接上锁提高了执行效率，还节省了内存空间。</p>
<h2 id="四-静态内部类"><a href="#四-静态内部类" class="headerlink" title="四. 静态内部类"></a>四. 静态内部类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line"></span><br><span class="line">    private static class SingletonHolder &#123;</span><br><span class="line">        private static final Singleton INSTANCE &#x3D; new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    public static final Singleton getInstance()&#123;</span><br><span class="line">        return SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态内部类的方式效果类似双检锁，但实现更简单。但这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p>
<h2 id="五-枚举"><a href="#五-枚举" class="headerlink" title="五.枚举"></a>五.枚举</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum Singleton&#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">    public void anyMethod()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举的方式是比较少见的一种实现方式，但是看上面的代码实现，却更简洁清晰。并且她还自动支持序列化机制，绝对防止多次实例化。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般情况下，  </p>
<ol>
<li>懒汉式（包含线程安全和线程不安全两种方式）都比较少用；  </li>
<li>饿汉式和双检锁都可以使用，可根据具体情况自主选择；  </li>
<li>在要明确实现 lazy loading 效果时，可以考虑静态内部类的实现方式；  </li>
<li>若涉及到反序列化创建对象时，也可以尝试使用枚举方式。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>通过jdk8特性将list&lt;Map&gt;数据拼接</title>
    <url>/2021/02/26/%E9%80%9A%E8%BF%87jdk8%E7%89%B9%E6%80%A7%E5%B0%86list-Map-%E6%95%B0%E6%8D%AE%E6%8B%BC%E6%8E%A5/</url>
    <content><![CDATA[<p>m1为第一个List<Map>集合，m2为第二个，且m1和m2有共同的唯一字段互相绑定</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; merge(List&lt;Map&lt;String, Object&gt;&gt; m1, List&lt;Map&lt;String, Object&gt;&gt; m2)&#123;</span><br><span class="line"></span><br><span class="line">     m1.addAll(m2);</span><br><span class="line"></span><br><span class="line">     Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> m1.stream()</span><br><span class="line">             .collect(Collectors.groupingBy(o-&gt;&#123;</span><br><span class="line">                 <span class="comment">//暂存所有key</span></span><br><span class="line">                 set.addAll(o.keySet());</span><br><span class="line">                 <span class="comment">//按某个唯一字段进行分组</span></span><br><span class="line">                 <span class="keyword">return</span> o.get(<span class="string">&quot;FLAGSTR&quot;</span>);</span><br><span class="line">             &#125;)).entrySet().stream().map(o-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">//合并</span></span><br><span class="line">                 Map&lt;String, Object&gt; map = o.getValue().stream().flatMap(m-&gt;&#123;</span><br><span class="line">                     <span class="keyword">return</span> m.entrySet().stream();</span><br><span class="line">                 &#125;).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (a,b)-&gt;b));</span><br><span class="line"></span><br><span class="line">                 <span class="comment">//为没有的key赋值0</span></span><br><span class="line">                 set.stream().forEach(k-&gt;&#123;</span><br><span class="line">                     <span class="keyword">if</span>(!map.containsKey(k)) map.put(k, <span class="number">0</span>);</span><br><span class="line">                 &#125;);</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">return</span> map;</span><br><span class="line">             &#125;).collect(Collectors.toList());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>实现部门+人员联合查询</title>
    <url>/2021/03/03/%E5%AE%9E%E7%8E%B0%E9%83%A8%E9%97%A8-%E4%BA%BA%E5%91%98%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>实际需求中，我们经常遇到这种场景：</p>
<span id="more"></span>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;msg&quot;: &quot;操作成功&quot;,</span><br><span class="line">    &quot;code&quot;: 200,</span><br><span class="line">    &quot;data&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;XX部门&quot;,</span><br><span class="line">            &quot;pid&quot;: 0,</span><br><span class="line">            &quot;id&quot;: 299,</span><br><span class="line">            &quot;type&quot;: &quot;部门&quot;,</span><br><span class="line">            &quot;child&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;4875jq&quot;,</span><br><span class="line">                    &quot;pid&quot;: 299,</span><br><span class="line">                    &quot;id&quot;: 206,</span><br><span class="line">                    &quot;type&quot;: &quot;用户&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;1764dpgly&quot;,</span><br><span class="line">                    &quot;pid&quot;: 299,</span><br><span class="line">                    &quot;id&quot;: 208,</span><br><span class="line">                    &quot;type&quot;: &quot;用户&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;XX部门&quot;,</span><br><span class="line">            &quot;pid&quot;: 0,</span><br><span class="line">            &quot;id&quot;: 300,</span><br><span class="line">            &quot;type&quot;: &quot;部门&quot;,</span><br><span class="line">            &quot;child&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;wsadp21&quot;,</span><br><span class="line">                    &quot;pid&quot;: 300,</span><br><span class="line">                    &quot;id&quot;: 210,</span><br><span class="line">                    &quot;type&quot;: &quot;用户&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;12323wd&quot;,</span><br><span class="line">                    &quot;pid&quot;: 300,</span><br><span class="line">                    &quot;id&quot;: 211,</span><br><span class="line">                    &quot;type&quot;: &quot;用户&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个树状列表查询中，包含了两种或者多种维度的数据进行共同展示，如行政规划——机构，单位——人员，部门——用户，区域——设备等等，<br>那么，我们应该怎么实现这种树状结构呢？</p>
<h2 id="核心思想：递归"><a href="#核心思想：递归" class="headerlink" title="核心思想：递归"></a>核心思想：递归</h2><p>直接上代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public List&lt;Map&lt;String, Object&gt;&gt; deptUnionUser(Long tenantId) &#123;</span><br><span class="line">    &#x2F;&#x2F;第一次进来</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; treeData &#x3D; getPlaneData(tenantId,null);</span><br><span class="line"></span><br><span class="line">    return treeData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private List&lt;Map&lt;String, Object&gt;&gt; getPlaneData (Long tenantId, Long deptId) &#123;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; topList &#x3D; commonOperationMapper.selectDeptUnionUser(tenantId,deptId);</span><br><span class="line">    if (StringUtils.isNotEmpty(topList))&#123;</span><br><span class="line">        for (Map&lt;String, Object&gt; topData :topList)&#123;</span><br><span class="line">            if (&quot;部门&quot;.equals(topData.get(&quot;type&quot;)))&#123;</span><br><span class="line">                Long id &#x3D; Long.valueOf(topData.get(&quot;id&quot;).toString());</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; child &#x3D; getPlaneData(tenantId , id);</span><br><span class="line">                topData.put(&quot;child&quot;,child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return topList ;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return null ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 接下来就是sql</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;select id&#x3D;&quot;selectDeptUnionUser&quot;  resultType&#x3D;&quot;map&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">    	dept_id AS id,</span><br><span class="line">    	dept_name AS name,</span><br><span class="line">    	parent_id AS pid,</span><br><span class="line">    	&#39;部门&#39; AS type</span><br><span class="line">    FROM</span><br><span class="line">    	sys_dept</span><br><span class="line">    WHERE</span><br><span class="line">        status &#x3D; &#39;0&#39;</span><br><span class="line">        and del_flag &#x3D; &#39;0&#39;</span><br><span class="line">    &lt;if test&#x3D;&quot;tenantId !&#x3D; null and tenantId !&#x3D; &#39;&#39; and tenantId !&#x3D; 0 &quot;&gt;</span><br><span class="line">        AND</span><br><span class="line">    	tenant_id &#x3D; $&#123;tenantId&#125;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;deptId !&#x3D; null and deptId !&#x3D; &#39;&#39; and deptId !&#x3D; 0&quot;&gt;</span><br><span class="line">        AND</span><br><span class="line">        parent_id &#x3D; $&#123;deptId&#125;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;deptId &#x3D;&#x3D; null or deptId &#x3D;&#x3D; &#39;&#39; or deptId &#x3D;&#x3D; 0&quot;&gt;</span><br><span class="line">        AND</span><br><span class="line">        parent_id &#x3D; 0</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">    	UNION</span><br><span class="line">    SELECT</span><br><span class="line">        su.user_id AS id,</span><br><span class="line">        su.user_name AS name,</span><br><span class="line">        su.dept_id AS pid,</span><br><span class="line">        &#39;用户&#39; AS type</span><br><span class="line">    FROM</span><br><span class="line">    	sys_user su</span><br><span class="line">    LEFT JOIN</span><br><span class="line">        sys_dept sd</span><br><span class="line">    ON</span><br><span class="line">        su.dept_id &#x3D; sd.dept_id</span><br><span class="line">    WHERE</span><br><span class="line">        su.status &#x3D; &#39;0&#39;</span><br><span class="line">        and su.del_flag &#x3D; &#39;0&#39;</span><br><span class="line">        and sd.status &#x3D; &#39;0&#39;</span><br><span class="line">        and sd.del_flag &#x3D; &#39;0&#39;</span><br><span class="line">    &lt;if test&#x3D;&quot;tenantId !&#x3D; null and tenantId !&#x3D; &#39;&#39; and tenantId !&#x3D; 0 &quot;&gt;</span><br><span class="line">        AND</span><br><span class="line">        su.tenant_id &#x3D; $&#123;tenantId&#125;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;deptId !&#x3D; null and deptId !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">        AND</span><br><span class="line">        su.dept_id &#x3D; $&#123;deptId&#125;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;deptId &#x3D;&#x3D; null or deptId &#x3D;&#x3D; &#39;&#39; or deptId &#x3D;&#x3D; 0&quot;&gt;</span><br><span class="line">        AND</span><br><span class="line">        su.dept_id &#x3D; 0</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><ol>
<li>首先，提供第一次进来的入口，设定初始参数，也就是顶层数据</li>
<li>进入主方法，查询初始参数下的顶层数据值</li>
<li>遍历查询到的所有结果，取下一层所有能继续展开的维度，递归调用主方法，并将下一层数据作为当前层数据的child对象</li>
<li>sql语句使用union查询，也可两次查询通过Java拼接，效果一样。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>ElaticSearch</title>
    <url>/2021/03/09/ES/</url>
    <content><![CDATA[<h1 id="ElaticSearch"><a href="#ElaticSearch" class="headerlink" title="ElaticSearch"></a>ElaticSearch</h1><h2 id="1-索引基本操作"><a href="#1-索引基本操作" class="headerlink" title="1.索引基本操作"></a>1.索引基本操作</h2><h3 id="1-1-创建一个索引"><a href="#1-1-创建一个索引" class="headerlink" title="1.1 创建一个索引"></a>1.1 创建一个索引</h3><span id="more"></span>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#创建一个索引</span><br><span class="line">PUT /person</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-查看索引信息"><a href="#1-2-查看索引信息" class="headerlink" title="1.2 查看索引信息"></a>1.2 查看索引信息</h3><p><img src="/var/folders/qm/chzcf3qj1vn5d3zlnd2652zc0000gn/T/abnerworks.Typora/image-20200716151737673.png" alt="image-20200716151737673"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#查看索引</span><br><span class="line">GET /person</span><br></pre></td></tr></table></figure>

<h3 id="1-3-删除索引"><a href="#1-3-删除索引" class="headerlink" title="1.3 删除索引"></a>1.3 删除索引</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">#删除索引</span><br><span class="line">DELETE /person</span><br></pre></td></tr></table></figure>



<h3 id="1-4-ES中Field可以指定的类型"><a href="#1-4-ES中Field可以指定的类型" class="headerlink" title="1.4 ES中Field可以指定的类型"></a>1.4 ES中Field可以指定的类型</h3><p><img src="/Users/zcy/Desktop/%E6%88%AA%E5%B1%8F2020-07-16%E4%B8%8B%E5%8D%883.45.31.png" alt="截屏2020-07-16下午3.45.31"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#String:</span><br><span class="line">	text：一般用于全文检索。将当前的field进行分词</span><br><span class="line"># keyword: 当前的Field不可被分词 </span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h3 id="1-5-创建索引并指定数据结构"><a href="#1-5-创建索引并指定数据结构" class="headerlink" title="1.5 创建索引并指定数据结构"></a>1.5 创建索引并指定数据结构</h3><p>——以创建小说为例子</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT /book</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">      #备份数</span><br><span class="line">    &quot;number_of_replicas&quot;: 1,</span><br><span class="line">      #分片数</span><br><span class="line">   	&quot;number_of_shards&quot;: 5</span><br><span class="line">  &#125;,</span><br><span class="line">    #指定数据结构</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    #指定类型 Type</span><br><span class="line">    &quot;novel&quot;: &#123;</span><br><span class="line">    # 文件存储的Field属性名</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">    #   指定当前的Field可以作为查询的条件</span><br><span class="line">          &quot;index&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;authoor&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;onsale&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">          &quot;format&quot;: &quot;yyyy-MM-dd&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-文档的操作"><a href="#1-6-文档的操作" class="headerlink" title="1.6 文档的操作"></a>1.6 文档的操作</h3><ul>
<li><u>文档在ES服务中的唯一标志，_index,   _type,    _id 三个内容为组合，来锁定一个文档，操作抑或是修改</u></li>
</ul>
<h4 id="1-6-1-新建文档"><a href="#1-6-1-新建文档" class="headerlink" title="1.6.1 新建文档"></a>1.6.1 新建文档</h4><ul>
<li>自动生成id</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /book/novel</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;西游记&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;authoor&quot;</span>: <span class="string">&quot;刘明&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;onsale&quot;</span>: <span class="string">&quot;2020-12-11&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>手动指定ID（更推荐）</strong></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /book/novel/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;三国演义&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;authoor&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;onsale&quot;</span>: <span class="string">&quot;2020-12-11&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-6-2-修改文档"><a href="#1-6-2-修改文档" class="headerlink" title="1.6.2 修改文档"></a>1.6.2 修改文档</h4><ul>
<li><p><u>覆盖式修改</u></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /book/novel/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;三国演义&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;authoor&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;onsale&quot;</span>: <span class="string">&quot;2020-12-11&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
<li><p><u>doc修改方式（更推荐）</u></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST /book/novel/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;极品家丁&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#先锁定文档，_update  修改需要的字段即可</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-6-3-删除文档"><a href="#1-6-3-删除文档" class="headerlink" title="1.6.3  删除文档"></a>1.6.3  删除文档</h4><ul>
<li><p><u>删库跑路</u></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DELETE /book/novel/1</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="2-java操作ElaticSearch"><a href="#2-java操作ElaticSearch" class="headerlink" title="2. java操作ElaticSearch"></a>2. java操作ElaticSearch</h2><h3 id="2-1-Java链接ES"><a href="#2-1-Java链接ES" class="headerlink" title="2.1 Java链接ES"></a>2.1 Java链接ES</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、创建Maven工程</span><br><span class="line">	导入依赖</span><br><span class="line">#  4个依赖</span><br><span class="line">   1、1  elasticsearch</span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   1、2  elasticsearch的高级API</span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.elasticsearch.client/elasticsearch-rest-high-level-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   1、3   junit</span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   1、4  lombok</span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-创建测试类，连接ES"><a href="#2-1-2-创建测试类，连接ES" class="headerlink" title="2.1.2 创建测试类，连接ES"></a>2.1.2 创建测试类，连接ES</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先创建连接，工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestHighLevelClient <span class="title">getClient</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        创建HttpHost对象</span></span><br><span class="line">        HttpHost httpHost = <span class="keyword">new</span> HttpHost(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9200</span>);</span><br><span class="line"><span class="comment">//      创建RestClientBuilder</span></span><br><span class="line">        RestClientBuilder builder = RestClient.builder(httpHost);</span><br><span class="line">        <span class="comment">//      创建RestHighLevelClien对象</span></span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-java创建索引"><a href="#2-2-java创建索引" class="headerlink" title="2.2 java创建索引"></a>2.2 java创建索引</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dengzhou.utils.ESClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.json.JsonXContent;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Create_ES_Index</span> </span>&#123;</span><br><span class="line">    String index = <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    String type = <span class="string">&quot;man&quot;</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     <span class="comment">//1、 准备关于索引的settings</span></span><br><span class="line">        Settings.Builder settings = Settings.builder()</span><br><span class="line">                .put(<span class="string">&quot;number_of_shards&quot;</span>, <span class="number">3</span>)</span><br><span class="line">                .put(<span class="string">&quot;number_of_replicas&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、 准备关于索引的结构mappings</span></span><br><span class="line">        XContentBuilder mappings = JsonXContent.contentBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                    .startObject(<span class="string">&quot;properties&quot;</span>)</span><br><span class="line">                        .startObject(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                            .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;text&quot;</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">                            .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;integer&quot;</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">&quot;birthday&quot;</span>)</span><br><span class="line">                             .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;date&quot;</span>)</span><br><span class="line">                             .field(<span class="string">&quot;format&quot;</span>,<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                    .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 将settings 和 mappings封装成一个request对象</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(index)</span><br><span class="line">                .settings(settings)</span><br><span class="line">                .mapping(type,mappings);</span><br><span class="line">        <span class="comment">//3   通过client对象去链接es并执行创建索引</span></span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;response&quot;</span>+response.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-检查索引是否存在，删除索引"><a href="#2-3-检查索引是否存在，删除索引" class="headerlink" title="2.3 检查索引是否存在，删除索引"></a>2.3 检查索引是否存在，删除索引</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查索引是否存在</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exists</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1 准备request对象</span></span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest();</span><br><span class="line">        request.indices(index);</span><br><span class="line">        <span class="comment">// 2 通过client去检查</span></span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        <span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-修改文档"><a href="#2-4-修改文档" class="headerlink" title="2.4 修改文档"></a>2.4 修改文档</h3><ul>
<li><p><u>添加文档操作</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. 准备json数据</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        String json = mapper.writeValueAsString(person);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 准备一个request对象(手动指定id创建)</span></span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(index,type,person.getId().toString());</span><br><span class="line">        indexRequest.source(json, XContentType.JSON);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            3、通过client对象执行添加操作</span></span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        IndexResponse resp = client.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            4、 输出返回</span></span><br><span class="line">        System.out.println(resp.getResult().toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><u>修改文档</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改文档，通过doc方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        创建map,指定需要修改的内容</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        String docId = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="comment">//           创建一个request对象，封装数据</span></span><br><span class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(index,type,docId);</span><br><span class="line">        updateRequest.doc(map);</span><br><span class="line"><span class="comment">//        通过client对象执行</span></span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        UpdateResponse update = client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//                返回输出结果</span></span><br><span class="line">        System.out.println(update.getResult().toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-删除文档"><a href="#2-5-删除文档" class="headerlink" title="2.5 删除文档"></a>2.5 删除文档</h3><h3 id="2-6-java批量操作文档"><a href="#2-6-java批量操作文档" class="headerlink" title="2.6 java批量操作文档"></a>2.6 java批量操作文档</h3><ul>
<li><pre><code class="json">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">## 3.ElasticSearch练习</span><br><span class="line"></span><br><span class="line">- &lt;u&gt;索引&lt;&#x2F;u&gt; ： &lt;u&gt;sms-logs-index&lt;&#x2F;u&gt;</span><br><span class="line"></span><br><span class="line">- &lt;u&gt;类型：sms-logs-type&lt;&#x2F;u&gt;</span><br><span class="line"></span><br><span class="line">| 字段名称   | 备注                                           |</span><br><span class="line">| ---------- | ---------------------------------------------- |</span><br><span class="line">| createDate | 创建时间String                                 |</span><br><span class="line">| sendDate   | 发送时间 date                                  |</span><br><span class="line">| longCode   | 发送长号码  如 16092389287811   string         |</span><br><span class="line">| Mobile     | 如 13000000000                                 |</span><br><span class="line">| corpName   | 发送公司名称，需要分词检索                     |</span><br><span class="line">| smsContent | 下发短信内容，需要分词检索                     |</span><br><span class="line">| State      | 短信下发状态 0 成功 1 失败      integer        |</span><br><span class="line">| Operatorid | 运营商编号1移动2联通3电信    integer           |</span><br><span class="line">| Province   | 省份                                           |</span><br><span class="line">| ipAddr     | 下发服务器IP地址                               |</span><br><span class="line">| replyTotal | 短信状态报告返回时长      integer              |</span><br><span class="line">| Fee        | 扣费                                   integer |</span><br><span class="line">|            |                                                |</span><br><span class="line"></span><br><span class="line">- 创建实例代码</span><br><span class="line"></span><br><span class="line">  ~~~java</span><br><span class="line">  &#x2F;&#x2F;先定义索引名和类型名 </span><br><span class="line">  String index &#x3D; &quot;sms_logs_index&quot;;</span><br><span class="line">   String type &#x3D; &quot;sms_logs_type&quot;;</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create_index</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       Settings.Builder settings = Settings.builder()</span><br><span class="line">               .put(<span class="string">&quot;number_of_shards&quot;</span>, <span class="number">3</span>)</span><br><span class="line">               .put(<span class="string">&quot;number_of_replicas&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">       XContentBuilder mappings = JsonXContent.contentBuilder()</span><br><span class="line">               .startObject()</span><br><span class="line">                   .startObject(<span class="string">&quot;properties&quot;</span>)</span><br><span class="line">                       .startObject(<span class="string">&quot;createDate&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;sendDate&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;date&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;format&quot;</span>, <span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;longCode&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;mobile&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;corpName&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;analyzer&quot;</span>, <span class="string">&quot;ik_max_word&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;smsContent&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;analyzer&quot;</span>, <span class="string">&quot;ik_max_word&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;state&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;integer&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;operatorid&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;integer&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;province&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;ipAddr&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;replyTotal&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;integer&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                       .startObject(<span class="string">&quot;fee&quot;</span>)</span><br><span class="line">                           .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;integer&quot;</span>)</span><br><span class="line">                       .endObject()</span><br><span class="line">                   .endObject()</span><br><span class="line">               .endObject();</span><br><span class="line">  </span><br><span class="line">       CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(index)</span><br><span class="line">               .settings(settings)</span><br><span class="line">               .mapping(type,mappings);</span><br><span class="line">  </span><br><span class="line">       RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">       CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">       System.out.println(response.toString());</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<ul>
<li><p><u>数据导入部分</u></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /sms_logs_index/sms_logs_type/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;corpName&quot;</span>: <span class="string">&quot;途虎养车&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-1-22&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;fee&quot;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">&quot;ipAddr&quot;</span>: <span class="string">&quot;10.123.98.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;longCode&quot;</span>: <span class="number">106900000009</span>,</span><br><span class="line">  <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;1738989222222&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;operatorid&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;province&quot;</span>: <span class="string">&quot;河北&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;relyTotal&quot;</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">&quot;sendDate&quot;</span>: <span class="string">&quot;2020-2-22&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;smsContext&quot;</span>:   <span class="string">&quot;【途虎养车】亲爱的灯先生，您的爱车已经购买&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;state&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h2 id="4-ES的各种查询"><a href="#4-ES的各种查询" class="headerlink" title="4. ES的各种查询"></a>4. ES的各种查询</h2><h3 id="4-1-term-amp-terms查询"><a href="#4-1-term-amp-terms查询" class="headerlink" title="4.1 term&amp;terms查询"></a>4.1 term&amp;terms查询</h3><h4 id="4-1-1-term查询"><a href="#4-1-1-term查询" class="headerlink" title="4.1.1 term查询"></a>4.1.1 term查询</h4><ul>
<li>?    <u>term的查询是代表完全匹配，搜索之前不会对你的关键字进行分词</u></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#term匹配查询</span><br><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;from&quot;: 0,   #limit  from,size</span><br><span class="line">  &quot;size&quot;: 5,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;province&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;河北&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">##不会对term中所匹配的值进行分词查询</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java代码实现方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        1 创建Request对象</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"><span class="comment">//        2 指定查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.from(<span class="number">0</span>);</span><br><span class="line">        builder.size(<span class="number">5</span>);</span><br><span class="line">        builder.query(QueryBuilders.termQuery(<span class="string">&quot;province&quot;</span>, <span class="string">&quot;河北&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"><span class="comment">//        3 执行查询</span></span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        4  获取到_source中的数据</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p><u>terms是针对一个字段包含多个值得运用</u></p>
<ul>
<li><u>terms: where province = 河北 or province = ? or province = ?</u></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#terms 匹配查询</span><br><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;province&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;河北&quot;</span>,</span><br><span class="line">        <span class="string">&quot;河南&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java代码 terms 查询</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_terms</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.termsQuery(<span class="string">&quot;province&quot;</span>,<span class="string">&quot;河北&quot;</span>,<span class="string">&quot;河南&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line"></span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits())&#123;</span><br><span class="line">            System.out.println(hit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="4-2-match查询"><a href="#4-2-match查询" class="headerlink" title="4.2 match查询"></a>4.2 match查询</h3><p><u>match查询属于高层查询，它会根据你查询字段类型不一样，采用不同的查询方式</u></p>
<p><u>match查询，实际底层就是多个term查询，将多个term查询的结果进行了封装</u></p>
<ul>
<li><p><u>查询的如果是日期或者是数值的话，它会根据你的字符串查询内容转换为日期或者是数值对等</u></p>
</li>
<li><p><u>如果查询的内容是一个不可被分的内容（keyword），match查询不会对你的查询的关键字进行分词</u></p>
</li>
<li><p><u>如果查询的内容是一个可被分的内容（text）,match则会根据指定的查询内容按照一定的分词规则去分词进行查询</u></p>
</li>
</ul>
<h4 id="4-2-1-match-all查询"><a href="#4-2-1-match-all查询" class="headerlink" title="4.2.1 match_all查询"></a>4.2.1 match_all查询</h4><p><u>查询全部内容，不指定任何查询条件</u></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_match_all</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     <span class="comment">// 创建Request  ,放入索引和类型</span></span><br><span class="line">       SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">       request.types(type);</span><br><span class="line">       builder.size(<span class="number">20</span>); <span class="comment">//es默认查询结果只展示10条，这里可以指定展示的条数</span></span><br><span class="line">       <span class="comment">//指定查询条件</span></span><br><span class="line">       SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       builder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">       request.source(builder);</span><br><span class="line">       <span class="comment">// 执行查询</span></span><br><span class="line">       RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">       SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">	<span class="comment">// 获取查询结果，遍历显示</span></span><br><span class="line">       <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits())&#123;</span><br><span class="line">           System.out.println(hit);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-match查询-根据某个Field"><a href="#4-2-2-match查询-根据某个Field" class="headerlink" title="4.2.2 match查询 根据某个Field"></a>4.2.2 match查询 根据某个Field</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;smsContent&quot;</span>: <span class="string">&quot;打车&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_match_field</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">       request.types(type);</span><br><span class="line">       SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       builder.query(QueryBuilders.matchQuery(<span class="string">&quot;smsContext&quot;</span>,<span class="string">&quot;打车&quot;</span>));</span><br><span class="line">       request.source(builder);</span><br><span class="line">       RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">       SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits())&#123;</span><br><span class="line">           System.out.println(hit);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-布尔match查询"><a href="#4-2-3-布尔match查询" class="headerlink" title="4.2.3 布尔match查询"></a>4.2.3 布尔match查询</h4><p><u>基于一个Filed匹配的内容，采用and或者or的方式进行连接</u></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 布尔match查询</span><br><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;smsContext&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;打车 女士&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;and&quot;</span>   #or</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_match_boolean</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.matchQuery(<span class="string">&quot;smsContext&quot;</span>,<span class="string">&quot;打车 女士&quot;</span>).operator(Operator.AND));</span><br><span class="line">        request.source(builder);</span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits())&#123;</span><br><span class="line">            System.out.println(hit);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-4-multi-match查询"><a href="#4-2-4-multi-match查询" class="headerlink" title="4.2.4 multi_match查询"></a>4.2.4 multi_match查询</h4><p><u>match针对一个field做检索，multi_match针对多个field进行检索，多个key对应一个text</u></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;河北&quot;,  #指定text</span><br><span class="line">      &quot;fields&quot;: [&quot;province&quot;,&quot;smsContext&quot;] #指定field</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java 实现 </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_multi_match</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">// 查询的文本内容  字段1 字段2 字段3 。。。。。</span></span><br><span class="line">        builder.query(QueryBuilders.multiMatchQuery(<span class="string">&quot;河北&quot;</span>, <span class="string">&quot;province&quot;</span>, <span class="string">&quot;smsContext&quot;</span>));</span><br><span class="line">        request.source(builder);</span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-ES-的其他查询"><a href="#4-3-ES-的其他查询" class="headerlink" title="4.3 ES 的其他查询"></a>4.3 ES 的其他查询</h3><h4 id="4-3-1-ID-查询"><a href="#4-3-1-ID-查询" class="headerlink" title="4.3.1  ID 查询"></a>4.3.1  ID 查询</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># id查询</span><br><span class="line">GET /sms_logs_index/sms_logs_type/1</span><br><span class="line">GET /索引名/type类型/id</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_multi_match</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(index,type,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        GetResponse resp = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(resp.getSourceAsMap());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-2-ids查询"><a href="#4-3-2-ids查询" class="headerlink" title="4.3.2 ids查询"></a>4.3.2 ids查询</h4><p><u>根据多个id进行查询，类似MySql中的where Id in (id1,id2,id3….)</u></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;ids&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;values&quot;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  #id值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//java代码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_query_ids</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">       request.types(type);</span><br><span class="line">       SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       builder.query(QueryBuilders.idsQuery().addIds(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>));</span><br><span class="line">       request.source(builder);</span><br><span class="line">       RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">       SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">       <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits())&#123;</span><br><span class="line">           System.out.println(hit.getSourceAsMap());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-3-prefix查询"><a href="#4-3-3-prefix查询" class="headerlink" title="4.3.3 prefix查询"></a>4.3.3 prefix查询</h4><p><u>前缀查询，可以通过一个关键字去指定一个Field的前缀，从而查询到指定的文档</u></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;smsContext&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;河&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#与 match查询的不同在于，prefix类似mysql中的模糊查询。而match的查询类似于严格匹配查询</span><br><span class="line"> # 针对不可分割词</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_query_prefix</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">       request.types(type);</span><br><span class="line">       SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       builder.query(QueryBuilders.prefixQuery(<span class="string">&quot;smsContext&quot;</span>,<span class="string">&quot;河&quot;</span>));</span><br><span class="line">       request.source(builder);</span><br><span class="line">       RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">       SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">       <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits())&#123;</span><br><span class="line">           System.out.println(hit.getSourceAsMap());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-4-fuzzy查询"><a href="#4-3-4-fuzzy查询" class="headerlink" title="4.3.4 fuzzy查询"></a>4.3.4 fuzzy查询</h4><p><u>fuzzy查询：模糊查询，我们可以输入一个字符的大概，ES就可以根据输入的内容大概去匹配一下结果，eg.你可以存在一些错别字</u></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#fuzzy查询</span><br><span class="line">#fuzzy查询</span><br><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;corpName&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;盒马生鲜&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;prefix_length&quot;</span>: <span class="number">2</span>  # 指定前几个字符要严格匹配</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#不稳定，查询字段差太多也可能查不到</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java 实现</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_query_fuzzy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.fuzzyQuery(<span class="string">&quot;corpName&quot;</span>,<span class="string">&quot;盒马生鲜&quot;</span>).prefixLength(<span class="number">2</span>));</span><br><span class="line">        request.source(builder);</span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits())&#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> .prefixLength() :指定前几个字符严格匹配</span><br></pre></td></tr></table></figure>

<h4 id="4-3-5-wildcard查询"><a href="#4-3-5-wildcard查询" class="headerlink" title="4.3.5 wildcard查询"></a>4.3.5 wildcard查询</h4><p> <u>通配查询，与mysql中的like查询是一样的，可以在查询时，在字符串中指定通配符*和占位符？</u></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#wildcard查询</span><br><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;wildcard&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;corpName&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;*车&quot;</span>   # 可以使用*和？指定通配符和占位符</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?代表一个占位符</span><br><span class="line">??代表两个占位符</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java代码</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_query_wildcard</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       builder.query(QueryBuilders.wildcardQuery(<span class="string">&quot;corpName&quot;</span>,<span class="string">&quot;*车&quot;</span>));</span><br><span class="line">        request.source(builder);</span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits())&#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-6-range查询"><a href="#4-3-6-range查询" class="headerlink" title="4.3.6  range查询"></a>4.3.6  range查询</h4><p><u>范围查询，只针对数值类型，对某一个Field进行大于或者小于的范围指定</u></p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;relyTotal&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="number">0</span>,  </span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">查询范围:[gte,lte]</span><br><span class="line">查询范围：(gt,lt)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java代码</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_query_range</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.rangeQuery(<span class="string">&quot;fee&quot;</span>).lt(<span class="number">5</span>).gt(<span class="number">2</span>));</span><br><span class="line">        request.source(builder);</span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits())&#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-7-regexp查询"><a href="#4-3-7-regexp查询" class="headerlink" title="4.3.7  regexp查询"></a>4.3.7  regexp查询</h4><p><u>正则查询，通过你编写的正则表达式去匹配内容</u></p>
<p><u>PS: prefix,fuzzy,wildcar和regexp查询效率相对比较低,在对效率要求比较高时，避免去使用</u></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;regexp&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;moible&quot;</span>: <span class="string">&quot;109[0-8]&#123;7&#125;&quot;</span>  # 匹配的正则规则</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java 代码</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_query_regexp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.regexpQuery(<span class="string">&quot;moible&quot;</span>,<span class="string">&quot;106[0-9]&#123;8&#125;&quot;</span>));</span><br><span class="line">        request.source(builder);</span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits())&#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-深分页Scroll"><a href="#4-4-深分页Scroll" class="headerlink" title="4.4 深分页Scroll"></a>4.4 深分页Scroll</h3><p><u>ES对from+size有限制，from和size两者之和不能超过1w</u></p>
<p><u>原理：</u></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">from+size  ES查询数据的方式：</span><br><span class="line"> 	1  先将用户指定的关键词进行分词处理</span><br><span class="line">    2  将分词去词库中进行检索，得到多个文档的id</span><br><span class="line">    3  去各个分片中拉去指定的数据   耗时</span><br><span class="line">    4  根据数据的得分进行排序       耗时</span><br><span class="line">    5  根据from的值，将查询到的数据舍弃一部分，</span><br><span class="line">    6  返回查询结果</span><br><span class="line"></span><br><span class="line">Scroll+size    在ES中查询方式</span><br><span class="line">	1  先将用户指定的关键词进行分词处理</span><br><span class="line">    2  将分词去词库中进行检索，得到多个文档的id</span><br><span class="line">    3  将文档的id存放在一个ES的上下文中，ES内存</span><br><span class="line">	4  根据你指定给的size的个数去ES中检索指定个数的数据，拿完数据的文档id,会从上下文中移除</span><br><span class="line">    5  如果需要下一页的数据，直接去ES的上下文中，找后续内容</span><br><span class="line">	6  循环进行4.5操作</span><br></pre></td></tr></table></figure>

<p><u>缺点，Scroll是从内存中去拿去数据的，不适合做实时的查询，拿到的数据不是最新的</u></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 执行scroll查询，返回第一页数据，并且将文档id信息存放在ES的上下文中，指定生存时间</span><br><span class="line">POST /sms_logs_index/sms_logs_type/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;fee&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">#查询下一页的数据</span><br><span class="line">POST /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scroll_id&quot;</span>: <span class="string">&quot;DnF1ZXJ5VGhlbkZldGNoAwAAAAAAACSPFnJjV1pHbENVVGZHMmlQbHVZX1JGdmcAAAAAAAAkkBZyY1daR2xDVVRmRzJpUGx1WV9SRnZnAAAAAAAAJJEWcmNXWkdsQ1VUZkcyaVBsdVlfUkZ2Zw==&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scoll&quot;</span> :<span class="string">&quot;1m&quot;</span>  #scorll信息的生存时间</span><br><span class="line">&#125;</span><br><span class="line">#删除scroll在ES中上下文的数据</span><br><span class="line">DELETE /_search/scroll/scrill_id</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java代码</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_query_scroll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        1   创建SearchRequest</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"><span class="comment">//        2   指定scroll信息,生存时间</span></span><br><span class="line">        request.scroll(TimeValue.timeValueMinutes(<span class="number">1L</span>));</span><br><span class="line"><span class="comment">//        3   指定查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.size(<span class="number">2</span>);</span><br><span class="line">        builder.sort(<span class="string">&quot;fee&quot;</span>,SortOrder.DESC);</span><br><span class="line">        builder.query(QueryBuilders.matchAllQuery());</span><br><span class="line"><span class="comment">//        4 获取返回结果scrollid ,source</span></span><br><span class="line">        request.source(builder);</span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        SearchResponse response = client.search(request,RequestOptions.DEFAULT);</span><br><span class="line">        String scrollId = response.getScrollId();</span><br><span class="line">        System.out.println(scrollId);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//       5  循环创建SearchScrollRequest</span></span><br><span class="line">        SearchScrollRequest scrollRequest = <span class="keyword">new</span> SearchScrollRequest(scrollId);</span><br><span class="line">        <span class="comment">// 6 指定scrollid生存时间</span></span><br><span class="line">        scrollRequest.scroll(TimeValue.timeValueMinutes(<span class="number">1L</span>));</span><br><span class="line"><span class="comment">//        7 执行查询获取返回结果</span></span><br><span class="line">        SearchResponse scrollResp = client.scroll(scrollRequest, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        8.判断是否得到数据，输出</span></span><br><span class="line">           <span class="keyword">if</span> (scrollResp.getHits().getHits() != <span class="keyword">null</span> &amp;&amp; scrollResp.getHits().getHits().length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;=======下一页的数据========&quot;</span>);</span><br><span class="line">               <span class="keyword">for</span> (SearchHit hit : scrollResp.getHits().getHits())&#123;</span><br><span class="line">                   System.out.println(hit.getSourceAsMap());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//        9。判断没有查询到数据-退出循环</span></span><br><span class="line">               System.out.println(<span class="string">&quot;没得&quot;</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 10  创建clearScrollRequest</span></span><br><span class="line">        ClearScrollRequest clearScrollRequest = <span class="keyword">new</span> ClearScrollRequest();</span><br><span class="line">        <span class="comment">// 11 指定scrollid</span></span><br><span class="line">        clearScrollRequest.addScrollId(scrollId);</span><br><span class="line">        <span class="comment">// 12  删除</span></span><br><span class="line">        client.clearScroll(clearScrollRequest,RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-delete-by-query"><a href="#4-5-delete-by-query" class="headerlink" title="4.5 delete-by-query"></a>4.5 delete-by-query</h3><p><u>根据term，match等查询方式去删除大量的文档</u></p>
<p><u>如果你需要删除的内容，是index下的大部分数据，不建议使用，建议逆向操作，创建新的索引，添加需要保留的数据内容</u></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST /sms_logs_index/sms_logs_type/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;relyTotal&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##中间跟你的查询条件，查到什么，删什么t</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test_sms_search2</span> </span>&#123;</span><br><span class="line">    String index = <span class="string">&quot;sms_logs_index&quot;</span>;</span><br><span class="line">    String type = <span class="string">&quot;sms_logs_type&quot;</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_query_fuzzy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteByQueryRequest request = <span class="keyword">new</span> DeleteByQueryRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line"></span><br><span class="line">        request.setQuery(QueryBuilders.rangeQuery(<span class="string">&quot;relyTotal&quot;</span>).gt(<span class="string">&quot;2&quot;</span>).lt(<span class="string">&quot;3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">        BulkByScrollResponse response = client.deleteByQuery(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(response.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-复合查询"><a href="#4-6-复合查询" class="headerlink" title="4.6 复合查询"></a>4.6 复合查询</h3><h4 id="4-6-1-bool查询"><a href="#4-6-1-bool查询" class="headerlink" title="4.6. 1 bool查询"></a>4.6. 1 bool查询</h4><p><u>复合过滤器，可以将多个查询条件以一定的逻辑组合在一起，and  or</u></p>
<ul>
<li><p>must : <u>所有的条件，用must组合在一起，表示AND</u></p>
</li>
<li><p> must_not:<u>将must_not中的条件，全部不能匹配，表示not的意思，不能匹配该查询条件</u></p>
</li>
<li><p>should: <u>所有条件，用should组合在一起，表示or的意思，文档必须匹配一个或者多个查询条件</u></p>
</li>
<li><p>filter: <u>过滤器，文档必须匹配该过滤条件，跟must子句的唯一区别是，filter不影响查询的score</u></p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#查询省份为河北或者河南的</span><br><span class="line">#并且公司名不是河马生鲜的</span><br><span class="line">#并且smsContext中包含软件两个字</span><br><span class="line">POST /sms_logs_index/sms_logs_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;province&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;河北&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;province&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;河南&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">    <span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;corpName&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;河马生鲜&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">     <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">           <span class="attr">&quot;smsContext&quot;</span>: <span class="string">&quot;软件&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
</search>
